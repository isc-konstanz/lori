@startuml lifecycle
participant Application [
    =Loris
    ----
    ""Application""
]
participant DataManager << (C,#ADD1B2) >>
participant ConnectorContext << (C,#ADD1B2) >>
participant ComponentContext << (C,#ADD1B2) >>
participant Connector << (C,#ADD1B2) >>
participant Component << (C,#ADD1B2) >>
participant DataAccess << (C,#ADD1B2) >>

====

Application -> DataManager: _do_configure()
activate DataManager

DataManager -> DataManager: configure(configs)
DataManager -> DataManager: _do_configure_members()
activate DataManager


DataManager -> ConnectorContext: _do_configure()
activate ConnectorContext

ConnectorContext -> ConnectorContext: configure(configs)
ConnectorContext -> ConnectorContext: _do_configure_members()
activate ConnectorContext

ConnectorContext -> Connector: _do_configure()
activate Connector
Connector -> Connector: configure(configs)
Connector -> Connector: _do_configure_members()
activate Connector
deactivate Connector
Connector -> Connector: _on_configure(configs)

deactivate Connector
deactivate ConnectorContext

ConnectorContext -> ConnectorContext: _on_configure(configs)
deactivate ConnectorContext


DataManager -> ComponentContext: _do_configure()
activate ComponentContext

ComponentContext -> ComponentContext: configure(configs)
ComponentContext -> ComponentContext: _do_configure_members()
activate ComponentContext

ComponentContext -> Component: _do_configure()
activate Component
Component -> Component: configure(configs)
    opt Add default Channel configurations
    activate Component
    Component -> DataAccess: add(id, configs)
    end
deactivate Component

Component -> Component: _do_configure_members()
activate Component

Component -> DataAccess: _do_configure()
activate DataAccess
DataAccess -> DataAccess: configure(configs)
deactivate DataAccess
deactivate Component

Component -> Component: _on_configure(configs)

deactivate Component
deactivate ComponentContext

ComponentContext -> ComponentContext: _on_configure(configs)
deactivate ComponentContext


deactivate DataManager

DataManager -> DataManager: _on_configure(configs)
deactivate DataManager

====

Application -> DataManager: _do_connect()
activate DataManager

DataManager -> DataManager: connect(channels)
DataManager -> Connector: _do_connect(channels)

activate Connector
Connector -> Connector: connect(channels)
Connector -> Connector: _on_connect(channels)
deactivate Connector

DataManager -> DataManager: _on_connect(channels)
deactivate DataManager

====


Application -> DataManager: _do_activate()
activate DataManager

DataManager -> DataManager: activate()
DataManager -> DataManager: _do_activate_members()
activate DataManager


DataManager -> ComponentContext: _do_activate()
activate ComponentContext

ComponentContext -> ComponentContext: activate()
ComponentContext -> ComponentContext: _do_activate_members()
activate ComponentContext

ComponentContext -> Component: _do_activate()
activate Component
Component -> Component: activate()
Component -> Component: _do_activate_members()
activate Component
deactivate Component

Component -> Component: _on_activate()

deactivate Component
deactivate ComponentContext

ComponentContext -> ComponentContext: _on_activate()
deactivate ComponentContext


deactivate DataManager

DataManager -> DataManager: _on_activate()
deactivate DataManager

loop While running
    Application -> Application: run()
    Activate Application

    Application -> DataManager: read()
    activate DataManager

    loop Connections with Channels to be read
        note over Connector #f5f5f5
            Results directly written
            into Channel values
        end note
        DataManager -> Connector: read(channels)
        activate Connector
        deactivate Connector
    end
    return pd.DataFrame

    Application -> DataManager: log(data)
    activate DataManager

    loop Connections with updated Channels
        DataManager -> Connector: write(data)
        activate Connector
        deactivate Connector
    end
    deactivate DataManager

    loop Components with updated Channels
        Application -> Component: run()
        activate Component
        deactivate Component
    end
    deactivate Application
end
@enduml
